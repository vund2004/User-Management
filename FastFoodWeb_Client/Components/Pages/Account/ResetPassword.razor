@page "/resetpassword"
@using FastFoodWeb_Client.Components.Layout
@layout NullLayout

@inject IHttpAccountService AccountService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@* Form model *@
@using Data.Models.AccountModels
@using Microsoft.AspNetCore.WebUtilities
@using FastFoodWeb_Client.HttpRepositories.Interfaces
@using Microsoft.JSInterop;

<div class="row no-gutters">
    <div class="col-sm-6 col-lg-5 col-xxl-4 align-self-center order-2 order-sm-1">
        <div class="d-flex align-items-center h-100-vh">
            <div class="login p-50">
                <h3>Input your new password.</h3>
                <EditForm Model="resetPasswordModel" FormName="resetPasswordPage" 
                    OnValidSubmit="HandleValidSubmit" class="mt-3 mt-sm-5">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="password" class="control-label">Password*</label>
                                <InputText type="password" Id="password" class="form-control" 
                                placeholder="Password" @bind-Value="resetPasswordModel.Password" />
                                <ValidationMessage For="@(() => resetPasswordModel.Password)" />
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-group">
                                <label for="confirmPassword" class="control-label">Confirm Password*</label>
                                <InputText type="password" Id="confirmPassword" class="form-control"
                                placeholder="Confirm Password" @bind-Value="resetPasswordModel.ConfirmPassword" />
                                <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
                            </div>
                        </div>
                        <input type="hidden" @bind="resetPasswordModel.Email" />
                        <input type="hidden" @bind="resetPasswordModel.Token" />
                        <div class="col-12 mt-3">
                            <button type="submit" class="btn btn-primary text-uppercase w-100">Change Password</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="col-sm-6 col-xxl-8 col-lg-7 bg-gradient o-hidden order-1 order-sm-2">
        <div class="row align-items-center h-100">
            <div class="col-7 mx-auto ">
                <img class="img-fluid" src="/admin/assets/img/bg/login.svg" alt="">
            </div>
        </div>
    </div>
</div>

@code {
    // private ResetPasswordVM resetPasswordModel = new ();
    private string message;

    private ResetPasswordVM resetPasswordModel = new ResetPasswordVM
        {
            Password = "User1234@",
            ConfirmPassword = "User1234@"
        };

    protected override void OnInitialized()
    {
        var queryParameters = new Uri(NavigationManager.Uri).Query;
        var queryCollection = QueryHelpers.ParseQuery(queryParameters);

        if (queryCollection.TryGetValue("email", out var email))
        {
            resetPasswordModel.Email = email;
        }

        if (queryCollection.TryGetValue("token", out var token))
        {
            resetPasswordModel.Token = token;
        }
    }
    private async Task HandleValidSubmit()
    {
        var response = await AccountService.ResetPasswordAsync(resetPasswordModel);
        if (response.IsSuccess == true && response != null)
        {
            var result = response.ToString();
            message = result;
        }

        await AccountService.ResetPasswordAsync(resetPasswordModel);
        NavigationManager.NavigateTo("/login");

        // Console.WriteLine($"Password: {resetPasswordModel.Password}");
        // Console.WriteLine($"ConfirmPassword: {resetPasswordModel.ConfirmPassword}");

        // if (string.IsNullOrWhiteSpace(resetPasswordModel.Password) 
        // || string.IsNullOrWhiteSpace(resetPasswordModel.ConfirmPassword))
        // {
        //     Console.WriteLine("Password or ConfirmPassword is null or empty.");
        //     return;
        // }

        
    }

    // private string password;
    // private string confirmPassword;

    // protected override void OnInitialized()
    // {
    //     resetPasswordModel = new ResetPasswordVM();

    // }
    // Console.WriteLine($"Password: {resetPasswordModel.Password}");
    // Console.WriteLine($"ConfirmPassword: {resetPasswordModel.ConfirmPassword}");
    // await AccountService.ResetPasswordAsync(resetPasswordModel);
    // NavigationManager.NavigateTo("/login");
}
