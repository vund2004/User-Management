@page "/edit-userrole/{userId}"
@using FastFoodWeb_Client.Components.Layout
@layout AdminLayout

@using Data.Models.RoleModels
@using Data.Models.UserRolesModels
@using FastFoodWeb_Client.HttpRepositories.Interfaces
@inject IHttpUserRoleService UserRoleService
@inject IHttpRoleService RoleService
@inject NavigationManager NavigationManager

<div class="col-md-12">
    <div class="card card-statistics">
        <div class="card-header">
            <div class="card-heading">
                <h4 class="card-title">Update Role</h4>
            </div>
        </div>
        <div class="card-body">
            <EditForm Model="@userRole" OnValidSubmit="UpdateUserrole">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="inputAddress">User Name</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-user-circle"></i></span>
                        </div>
                        <InputText readonly class="form-control" id="inputAddress" @bind-Value="userRoleView.UserName" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="inputRole">Role</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fa fa-user"></i></span>
                        </div>
                        @* <select class="custom-select" @bind="userRole.RoleName">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Name" selected="@(role.Name == userRole.RoleName ? "selected" : null)">@role.Name</option>
                            }
                        </select> *@
                        <select class="custom-select" @bind="userRole.RoleName">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Name">@role.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-danger" @onclick="GoBack">Back</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string userId { get; set; }

    private UserRoleForUpdate userRole = new UserRoleForUpdate();
    private UserRoleForView userRoleView = new UserRoleForView();
    private IEnumerable<RoleForView> roles = new List<RoleForView>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRole();
        await LoadUserRole();
    }

    private async Task UpdateUserrole()
    {
        try
        {
            await UserRoleService.UpdateUserRoleAsync(userId, userRole);
            NavigationManager.NavigateTo("/userroles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user role: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/userroles");
    }
    private async Task LoadUserRole()
    {
        userRoleView = await UserRoleService.GetUserRolesByUserIdAsync(userId);

        userRole = new UserRoleForUpdate
            {
                RoleName = userRoleView.RoleName
            };
    }

    private async Task LoadRole()
    {
        roles = await RoleService.GetAllRolesAsync();
    }
}
